if(y==0){
gain <- gain + 1
} else {
z <- sample(0:2,1,prob=pace)
if(z==0){gain <- gain + 2}
if(z==1){gain <- gain + 10}
if(z==2){gain <- gain + 50}
}
}
return(gain)
}
amtpaid <- 5; numtimes <- 10000; gains <- c()
for(i in 1:numtimes){gains <- c(gains,simplegame(amtpaid))}
mean(gains)
simplegame <- function(amtpaid){
gain <- -amtpaid
x <- 0:2; pace <- (choose(4,x)*choose(48,2-x))/choose(52,2)
x <- sample(1:6,1,prob=rep(1/6,6))
if(x > 2){
y <- sample(0:1,1,prob=rep(1/2,2))
if(y==0){
gain <- gain + 1
} else {
z <- sample(0:2,1,prob=pace)
if(z==0){gain <- gain + 2}
if(z==1){gain <- gain + 10}
if(z==2){gain <- gain + 50}
}
}
return(gain)
}
amtpaid <- 5; numtimes <- 10000; gains <- c()
for(i in 1:numtimes){gains <- c(gains,simplegame(amtpaid))}
mean(gains)
simplegame <- function(amtpaid){
gain <- -amtpaid
x <- 0:2; pace <- (choose(4,x)*choose(48,2-x))/choose(52,2)
x <- sample(1:6,1,prob=rep(1/6,6))
if(x > 2){
y <- sample(0:1,1,prob=rep(1/2,2))
if(y==0){
gain <- gain + 1
} else {
z <- sample(0:2,1,prob=pace)
if(z==0){gain <- gain + 2}
if(z==1){gain <- gain + 10}
if(z==2){gain <- gain + 50}
}
}
return(gain)
}
amtpaid <- 5; numtimes <- 10000; gains <- c()
for(i in 1:numtimes){gains <- c(gains,simplegame(amtpaid))}
mean(gains)
simplegame <- function(amtpaid){
gain <- -amtpaid
x <- 0:2; pace <- (choose(4,x)*choose(48,2-x))/choose(52,2)
x <- sample(1:6,1,prob=rep(1/6,6))
if(x > 2){
y <- sample(0:1,1,prob=rep(1/2,2))
if(y==0){
gain <- gain + 1
} else {
z <- sample(0:2,1,prob=pace)
if(z==0){gain <- gain + 2}
if(z==1){gain <- gain + 10}
if(z==2){gain <- gain + 50}
}
}
return(gain)
}
amtpaid <- 5; numtimes <- 10000; gains <- c()
for(i in 1:numtimes){gains <- c(gains,simplegame(amtpaid))}
mean(gains)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
simplegame(5)
lines(circum ~ r); title("Circumference vs Radius")
8+6-7*2
simplegame(5)
(150/3)+7^2-1;sqrt(50)-(50)^(0.5)
(4/3)*pi*(5)^3
r<-5
vol<-(4/3)*pi*(r)^3
vol
r <- c(5,6,7,8,9)
r
vol<-(4/3)*pi*(r)^3;vol
r <- 5:9 ; Vol <- (4/3)*pi*r^3 ; Vol
vol[2]
r[2]
#matrices
v1=c(1,3);r <- 5:9 ; Vol <- (4/3)*pi*r^3 ; Vol
v1=c(1,3);v2=c(4,2);Mat_A=cbind(v1,v2)
Mat_A
v1=c(1,3,5,7);v2=c(2,4,6,8);Mat_B=rbind(v1,v2)
mat_B
8+6-7*2
simplegame(5)
(150/3)+7^2-1;sqrt(50)-(50)^(0.5)
(4/3)*pi*(5)^3
r<-5
vol<-(4/3)*pi*(r)^3
vol
r <- c(5,6,7,8,9)
r
vol<-(4/3)*pi*(r)^3;vol
r <- 5:9 ; Vol <- (4/3)*pi*r^3 ; Vol
vol[2]
r[2]
#matrices
v1=c(1,3);r <- 5:9 ; Vol <- (4/3)*pi*r^3 ; Vol
v1=c(1,3);v2=c(4,2);Mat_A=cbind(v1,v2)
Mat_A
v1=c(1,3,5,7);v2=c(2,4,6,8);Mat_B=rbind(v1,v2)
mat_B
v1=c(1,3,5,7);v2=c(2,4,6,8);Mat_B=rbind(v1,v2);mat_B
v1=c(1,3,5,7);v2=c(2,4,6,8);Mat_B=rbind(v1,v2);Mat_B
Mat_A%*%Mat_B;solve(Mat_A);t(Mat_B)%*%Mat_A
Mat_A[2,2]
Mat_A[2,1]
Mat_B[2:3,3:4]
#Mat_B[2:3,3:4]
Mat_B[1:2,3:4]
x = c(-2,0,3,4,-7,-8,11,0)
x
xn = x[x<0]; xn
xp = x[x>0]; xp
xz = x[x=0]; xz
xz = x[x==0]; xz
par(mfrow=c(2,2))
par(mfrow=c(4,4))
par(mfrow=c(4,4))
par(mfrow=c(2,2))
r <- seq(0,8,.1)
r
Vol <- (4/3)*pi*r^3
Vol
plot(Vol ~ r)
par(mfrow=c(2,2))
r <- seq(0,8,.1)
r
Vol <- (4/3)*pi*r^3
Vol
plot(Vol ~ r)
plot(Vol ~ r,xlab="Radius",ylab="Volume")
title("Volume of Sphere versus its radius")
plot(Vol ~ r,pch=" ",xlab="Radius",ylab="Volume")
lines(Vol ~ r)
circum <- 2*pi*r
circum
plot(circum ~ r,pch=" ",xlab="Radius",ylab="Circumference")
lines(circum ~ r); title("Circumference vs Radius")
1-pnorm(72,70,4)
qnorm(.90,70,4)
dnorm(72,70,4)
rnorm(6,70,4)
x = rnorm(100,70,4); x=sort(x)
x
hist(x,pr=T,main="Histogram of Sample")
hist(x,pr=F,main="Histogram of Sample")
y = dnorm(x,70,4)
lines(y~x)
lines(y~x)
lines(y~x)
lines(y~x)
hist(x,pr=T,main="Histogram of Sample")
x = rnorm(100,70,4); x=sort(x)
hist(x,pr=T,main="Histogram of Sample")
#hist(x,pr=F,main="Histogram of Sample")
y = dnorm(x,70,4)
lines(y~x)
x = rnorm(100,70,4); x=sort(x)
hist(x,pr=T,main="Histogram of Sample")
#hist(x,pr=F,main="Histogram of Sample")
y = dnorm(x,70,4)
lines(y~x)
pbinom(55,100,.6)
dbinom(55,100,.6)
mu=30; sig=sqrt(2*mu); 1-pchisq(mu+2*sig,30)
1-pgamma(mu+2*sig,15,1/2)
vec = 1:20
sample(vec,12,replace=T)
sample(vec,12,replace=T)
sample(vec,12,replace=F)
sample(vec,12,replace=F)
sample(vec,12,replace=F)
sample(vec,12,replace=F)
sample(vec,12,replace=F)
sample(vec,12,replace=F)
sample(vec,12,replace=F)
sample(vec,12,replace=F)
sample(vec,12,replace=F)
sample(vec,12,replace=F)
path <- "C:\Users\ankit19.gupta\Documents\Table2_Purchases_NOV_2023.csv"
path <- "/Users/ankit19.gupta/Documents/Table2_Purchases_NOV_2023.csv"
content <- read.csv(path)
print (content)
path <- "/Users/ankit19.gupta/Documents/Table2_Purchases_NOV_2023.csv"
new_data <- read.csv(path)
print (new_data)
test_set<-unique(new_data$IndiffMonth)
test_set
Month <-as.yearmon(Month,"%b%Y")
library("zoo")
install.packages("zoo")
library("zoo")
Month <-as.yearmon(Month,"%b%Y")
Month<-test_set
library("zoo")
Month <-as.yearmon(Month,"%b%Y")
Month
test_set
install.packages("odbc")
options(warn = -1)
rm(list = ls())
con <- dbConnect(odbc(),
Driver ="ODBC Driver 17 for SQL Server",
Server = "10.131.37.216",
Database = "CrudeIndiffOutput_PRD",
UID = "CrudeIndiff_Analytics_BI_PRD",
PWD = "CrudeIndiff_Analytics_BI_PRD@123#216",port= 1433)
con <- dbConnect(odbc(),
Driver ="SQL Server",
Server = "10.131.37.216",
Database = "CrudeIndiffOutput_PRD",
UID = "CrudeIndiff_Analytics_BI_PRD",
PWD = "CrudeIndiff_Analytics_BI_PRD@123#216",port= 1433)
install.packages("RSQLServer")
library("RSQLServer")
library("RSQLServer")
sort(unique(odbcListDrivers()[[1]]))
library(odbc)
install.packages("vctrs")
remotes::install_version("vctrs", version = "0.3.3", repos = "http://cran.us.r-project.org")
install.packages("remotes")
library(odbc)
install.packages("C:/Users/ankit19.gupta/Downloads/vctrs_0.6.3.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/ankit19.gupta/Downloads/vctrs_0.6.3.tar.gz", repos = NULL, type = "source")
library(odbc)
remove.packages(odbc)
remove.packages("odbc")
library(odbc)
install.packages()
install.packages("odbc")
library(odbc)
sort(unique(odbcListDrivers()[[1]]))
drlist<-unique(odbcListDrivers())
print(drlist)
con <- dbConnect(odbc(),
Driver ="SQL Server",
Server = "10.131.37.216",
Database = "CrudeIndiffOutput_PRD",
UID = "CrudeIndiff_Analytics_BI_PRD",
PWD = "CrudeIndiff_Analytics_BI_PRD@123#216",port= 1433)
print(paste0(Sys.time(), ': Reading from database...'))
table1<-dbGetQuery(con, "SELECT * FROM dbo.RW_Purchases WHERE CaseName in ('Base')")
print(paste0("Data loaded ", nrow(table1)))
table1$IndiffMonth<-as.character(table1$IndiffMonth)
table1<- table1[table1$IndiffMonth!="MAR-2019",]
mappingDBconnection <- dbConnect(odbc(),
Driver ="ODBC Driver 17 for SQL Server",
Server = "10.131.37.75",
Database = "RM_ST_Analytics_PRD",
UID = "RM_ST_Analytics_PRD",
PWD = "RM_ST_Analytics_PRD@123#75",port= 1433)
print(paste0(Sys.time(), ': Reading from database...'))
mapping_db<-dbGetQuery(mappingDBconnection, "SELECT * FROM dbo.RM_ST_MC_MOPS_TAGS  WHERE Constraint_type='Purchases'")
print(paste0("Data loaded ", nrow(mapping_db)))
print(Sys.time())
mapping_db=as.character(mapping_db[mapping_db$Removable=="Y","Tag_name"])
table2<-table1[-(table1$StreamTag%in%mapping_db),]
table2<-table2[table2$NodeID>=4,]  #Changed
keep_tags_1=table2[which(table2$WgtMax!=0 & table2$WgtMarginalValue!=0),]
#table2<-table2[(table2$StreamTag)%in%keep_tags$StreamTag,]
table2<-table2[(table2$StreamTag)%in%keep_tags_1$StreamTag,]
print(Sys.time())
head(table2)
#############################################
############################################
#############################################
new_data=table2
############################ QUARTERLY #########################
################################################################
library("zoo")
new_data[,31]<-as.yearmon(as.character(new_data[,31]),"%b-%Y")
test_set<-unique(new_data$IndiffMonth)
test_set
tab<-new_data[i,]
tab<-new_data[1,]
Month=tab$IndiffMonth
Month
Month <-as.yearmon(Month,"%b%Y")
Month
month_set =time(zooreg(1:4,frequency = 12, end=as.yearmon(Month,"%b%Y")))
month_set
Month="Oct 2023"
Month <-as.yearmon(Month,"%b%Y")
month_set =time(zooreg(1:4,frequency = 12, end=as.yearmon(Month,"%b%Y")))
month_set
tab<-new_data[1,]
Month=tab$IndiffMonth
Month <-as.yearmon(Month,"%b%Y")
month_set =time(zooreg(1:4,frequency = 12, end=as.yearmon(Month,"%b%Y")))
interval = test_set[test_set%in%month_set]
interval=sort(interval)
interval
e^(-1)-e^(-3)
exp(0)
exp(-1)-exp(-3)
F = antiD(a * x^2 ~ x, a = 1)
#################################
integrand <- function(x) {1/((x+1)*sqrt(x))}
integrate(integrand, lower = 0, upper = Inf)
integrand <- function(x) {1/((x+1)*sqrt(x))}
integrate(integrand, lower = 0, upper = Inf)
library(cubature) # load the package "cubature"
f <- function(x) { 4 * (x[1]^2*x[2]) - x[3]^3 } # "x" is vector
adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))
library(cubature) # load the package "cubature"
f <- function(x) { 4 * (x[1]^2*x[2]) - x[3]^3 } # "x" is vector
x<-adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))
x
x[0]
library(cubature) # load the package "cubature"
f <- function(x) { 4 * (x[1]^2*x[2]) - x[3]^3 } # "x" is vector
adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral
library(cubature) # load the package "cubature"
f <- function(x) { 4 * (x[1]^2*x[2]) - x[3]^3 } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
library(cubature) # load the package "cubature"
f <- function(x) { 4 * (x[1]^2*x[2]) - x[3]^3 } # "x" is vector
paste(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
library(cubature) # load the package "cubature"
f <- function(x) { 4 * (x[1]^2*x[2]) - x[3]^3 } # "x" is vector
paste0(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
library(cubature) # load the package "cubature"
f <- function(x) { 4 * (x[1]^2*x[2]) - x[3]^3 } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4 * (sin(x[1])^2*x[2]) - x[3]^3 } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4 * (sin(x[1])^2*x[2]) + x[3]^3 } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4 * (sin(x[1])^2*x[2]) * x[3]^3 } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4 * x[1]+x[2]+x[3] } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4 * (x[1]+x[2]+x[3]) } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4 * (2*x[1]+x[2]+x[3]) } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4 * (2*x[1]-x[2]+x[3]) } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4 * (2*x[1]*x[2]+x[3]) } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4 * x[1] } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4 * x[1]/x[2] } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4*(2*x[1]^7)+x[2] } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
f <- function(x) { 4*(2*x[1]^8)+x[2] } # "x" is vector
print(adaptIntegrate(f, lowerLimit = c(-3, -2, -1), upperLimit = c(3, 2, 1))$integral)
for(i in (1:4)){
print(i)
}
2^4
bday=function(n){
temp=1;days=365;
for(i in (1:n)){
temp=temp*(days);
days<-days-1;
}
complement_prob=temp/(days^n);
return(1-complement_prob)
}
source(BirthdayParadox.R)
source("BirthdayParadox.R")
source("BirthdayParadox.R")
getwd()
setwd("C:\Users\ankit19.gupta\Desktop\Self_Projects\IntroToMathematicalStatistics\Chapter1")
setwd("C:/Users/ankit19.gupta/Desktop/Self_Projects/IntroToMathematicalStatistics/Chapter1")
getwd()
source("BirthdayParadox.R")
bday(10)
bday(10)
bday(10)
source("BirthdayParadox.R")
temp=1;days=365;
for(i in (1:n)){
temp=temp*(days);
days<-days-1;
}
temp=1;days=365;n-10
temp=1;days=365;n=10;
for(i in (1:n)){
temp=temp*(days);
days<-days-1;
}
print(temp);
complement_prob=temp/(days^n)
complement_prob
1-complement_prob
temp=1;days=365;n=2;
for(i in (1:n)){
temp=temp*(days);
days<-days-1;
}
print(temp);
complement_prob=temp/(days^n)
print(1-complement_prob)
temp=1;days=365;n=2;
for(i in (1:n)){
print(temp,days)
temp=temp*(days);
days<-days-1;
}
temp=1;days=365;n=2;
for(i in (1:n)){
print(temp)
print(days)
temp=temp*(days);
days<-days-1;
}
print(temp);
complement_prob=temp/(days^n)
print(1-complement_prob)
365*364
n
temp=1;days=365;n=2;
for(i in (1:n)){
print(temp)
print(days)
temp=temp*(days);
days<-days-1;
}
print(temp);
complement_prob=temp/(365^n)
print(1-complement_prob)
source("BirthdayParadox.R")
source.with.encoding("BirthdayParadox.R")
source("BirthdayParadox.R")
getwd()
source("BirthdayParadox.R")
source("BirthdayParadox.R","r")
source("BirthdayParadox.R")
source("BirthdayParadox.R")
source("BirthdayParadox.R")
bday(10)
bday(2)
temp=1;days=365;n=2;
for(i in (1:n)){
temp=temp*(days);
days<-days-1;
}
complement_prob=temp/(365^n);
print(1-complement_prob)
temp=1;days=365;n=10;
for(i in (1:n)){
temp=temp*(days);
days<-days-1;
}
complement_prob=temp/(365^n);
print(1-complement_prob)
bday(2)
bday(2)
bday=function(n){
temp=1;days=365;
for(i in (1:n)){
temp=temp*(days);
days<-days-1;
}
complement_prob=temp/(365^n);
return(1-complement_prob)
}
bday(2)
bday(10)
source("BirthdayParadox.R")
source("C:\Users/ankit19.gupta/Desktop/Self_Projects/IntroToMathematicalStatistics/Chapter1/BirthdayParadox.R")
source("C:/Users/ankit19.gupta/Desktop/Self_Projects/IntroToMathematicalStatistics/Chapter1/BirthdayParadox.R")
source("C://Users/ankit19.gupta/Desktop/Self_Projects/IntroToMathematicalStatistics/Chapter1/BirthdayParadox.R")
setwd("C:/Users/ankit19.gupta/Desktop/Self_Projects/IntroToMathematicalStatistics/Chapter1")
source("C:/Users/ankit19.gupta/Desktop/Self_Projects/IntroToMathematicalStatistics/Chapter1/BirthdayParadox.R")
getwd()
setwd("C:/Users/ankit19.gupta/Desktop/Self_Projects/IntroToMathematicalStatistics/Chapter1/")
source("C:/Users/ankit19.gupta/Desktop/Self_Projects/IntroToMathematicalStatistics/Chapter1/BirthdayParadox.R")
source("BirthdayParadox.R")
source("BirthdayParadox.R", "r", encoding = encoding)
source('BirthdayParadox.R')
source("BirthdayParadox.R", "r", encoding = encoding,local = FALSE)
source("BirthdayParadox.R", "r", encoding = encoding,local = FALSE, echo = verbose)
source("BirthdayParadox.R", "r", encoding = encoding,local = FALSE, echo = logical)
source('1.BirthdayParadox.R')
bday(10)
